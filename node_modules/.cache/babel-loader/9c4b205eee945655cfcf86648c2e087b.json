{"remainingRequest":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/babel-loader/lib/index.js!/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/eslint-loader/index.js??ref--13-0!/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/src/lib/axios/index.js","dependencies":[{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/src/lib/axios/index.js","mtime":1670489054198},{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/cache-loader/dist/cjs.js","mtime":1670485002502},{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n\n/**\n * axios组件自己定义封装，增加基础配置、请求前、后拦截器处理。\n * @return axios对象\n * */\nimport axios from 'axios';\nimport utils from '@/lib/utils';\nimport Config from '@/config';\nvar ajaxUrl = window.location.origin + Config[Config.env].ajaxUrl;\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\naxios.defaults.withCredentials = true;\nvar Ajax = axios.create({\n  baseURL: ajaxUrl,\n  timeout: 30000,\n  transformRequest: [function transformRequest(data, headers) {\n    /* 把类似content-type这种改成Content-Type */\n    var keys = Object.keys(headers);\n    var normalizedName = 'Content-Type';\n    keys.forEach(function (name) {\n      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n        headers[normalizedName] = headers[name];\n        delete headers[name];\n      }\n    });\n\n    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n      return data;\n    }\n\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    /* 这里是重点，其他的其实可以照着axios的源码抄 */\n\n    /* 这里就是用来解决POST提交json数据的时候是直接把整个json放在request payload中提交过去的情况\n     * 这里简单处理下，把 {name: 'admin', pwd: 123}这种转换成name=admin&pwd=123就可以通过\n     * x-www-form-urlencoded这种方式提交\n     * */\n\n\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      var keys2 = Object.keys(data);\n      /* 这里就是把json变成url形式，并进行encode */\n\n      return encodeURI(keys2.map(function (name) {\n        return \"\".concat(name, \"=\").concat(data[name]);\n      }).join('&'));\n    }\n\n    return data;\n  }]\n}); //ajax请求前拦截器\n\nAjax.interceptors.request.use(function (config) {\n  if (config.method === 'post' && utils.isUndefined(config.headers['Content-Type'])) {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); //ajax响应后拦截器\n\nAjax.interceptors.response.use(function (response) {\n  // if (response.data.errCode === 'A0002'){ }\n  return response.data;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default Ajax;",{"version":3,"sources":["src/lib/axios/index.js"],"names":["axios","utils","Config","ajaxUrl","window","location","origin","env","setContentTypeIfUnset","headers","value","isUndefined","defaults","withCredentials","Ajax","create","baseURL","timeout","transformRequest","data","keys","Object","normalizedName","forEach","name","toUpperCase","isFormData","isArrayBuffer","isStream","isFile","isBlob","isURLSearchParams","toString","isObject","keys2","encodeURI","map","join","interceptors","request","use","config","method","error","Promise","reject","response"],"mappings":";;;;;AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,UAAUC,OAAOC,QAAP,CAAgBC,MAAhB,GAAyBJ,OAAOA,OAAOK,GAAd,EAAmBJ,OAA5D;;AAEA,SAASK,qBAAT,CAA+BC,OAA/B,EAAwCC,KAAxC,EAA+C;AAC3C,MAAI,CAACT,MAAMU,WAAN,CAAkBF,OAAlB,CAAD,IAA+BR,MAAMU,WAAN,CAAkBF,QAAQ,cAAR,CAAlB,CAAnC,EAA+E;AAC3EA,YAAQ,cAAR,IAA0BC,KAA1B;AACH;AACJ;;AAEDV,MAAMY,QAAN,CAAeC,eAAf,GAA+B,IAA/B;AAEA,IAAMC,OAAOd,MAAMe,MAAN,CAAa;AACtBC,WAASb,OADa;AAEtBc,WAAS,KAFa;AAGtBC,oBAAkB,CAAC,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCV,OAAhC,EAAyC;AACxD;AACA,QAAIW,OAAOC,OAAOD,IAAP,CAAYX,OAAZ,CAAX;AACA,QAAIa,iBAAiB,cAArB;AACAF,SAAKG,OAAL,CAAa,gBAAQ;AACjB,UAAIC,SAASF,cAAT,IAA2BE,KAAKC,WAAL,OAAuBH,eAAeG,WAAf,EAAtD,EAAoF;AAChFhB,gBAAQa,cAAR,IAA0Bb,QAAQe,IAAR,CAA1B;AACA,eAAOf,QAAQe,IAAR,CAAP;AACH;AACJ,KALD;;AAMA,QAAIvB,MAAMyB,UAAN,CAAiBP,IAAjB,KACAlB,MAAM0B,aAAN,CAAoBR,IAApB,CADA,IAEAlB,MAAM2B,QAAN,CAAeT,IAAf,CAFA,IAGAlB,MAAM4B,MAAN,CAAaV,IAAb,CAHA,IAIAlB,MAAM6B,MAAN,CAAaX,IAAb,CAJJ,EAKE;AACE,aAAOA,IAAP;AACH;;AACD,QAAIlB,MAAM8B,iBAAN,CAAwBZ,IAAxB,CAAJ,EAAmC;AAC/BX,4BAAsBC,OAAtB,EAA+B,iDAA/B;AACA,aAAOU,KAAKa,QAAL,EAAP;AACH;AACD;;AACA;;;;;;AAIA,QAAI/B,MAAMgC,QAAN,CAAed,IAAf,CAAJ,EAA0B;AACtBX,4BAAsBC,OAAtB,EAA+B,iDAA/B;AACA,UAAIyB,QAAQb,OAAOD,IAAP,CAAYD,IAAZ,CAAZ;AACA;;AACA,aAAOgB,UAAUD,MAAME,GAAN,CAAU;AAAA,yBAAWZ,IAAX,cAAmBL,KAAKK,IAAL,CAAnB;AAAA,OAAV,EAA2Ca,IAA3C,CAAgD,GAAhD,CAAV,CAAP;AACH;;AACD,WAAOlB,IAAP;AACH,GAlCiB;AAHI,CAAb,CAAb,C,CAyCA;;AACAL,KAAKwB,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,UAAUC,MAAV,EAAkB;AAC5C,MAAIA,OAAOC,MAAP,KAAkB,MAAlB,IAA4BzC,MAAMU,WAAN,CAAkB8B,OAAOhC,OAAP,CAAe,cAAf,CAAlB,CAAhC,EAAmF;AAC/EgC,WAAOhC,OAAP,CAAe,cAAf,IAAiC,gCAAjC;AACH;;AACD,SAAOgC,MAAP;AACH,CALD,EAKG,UAAUE,KAAV,EAAiB;AAChB,SAAOC,QAAQC,MAAR,CAAeF,KAAf,CAAP;AACH,CAPD,E,CAQA;;AACA7B,KAAKwB,YAAL,CAAkBQ,QAAlB,CAA2BN,GAA3B,CAA+B,UAAUM,QAAV,EAAoB;AAC/C;AACA,SAAOA,SAAS3B,IAAhB;AACH,CAHD,EAGG,UAAUwB,KAAV,EAAiB;AAChB,SAAOC,QAAQC,MAAR,CAAeF,KAAf,CAAP;AACH,CALD;AAOA,eAAe7B,IAAf","sourceRoot":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9","sourcesContent":["/**\n * axios组件自己定义封装，增加基础配置、请求前、后拦截器处理。\n * @return axios对象\n * */\n\nimport axios from 'axios';\nimport utils from '@/lib/utils';\nimport Config from '@/config';\n\nconst ajaxUrl = window.location.origin + Config[Config.env].ajaxUrl;\n\nfunction setContentTypeIfUnset(headers, value) {\n    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n        headers['Content-Type'] = value;\n    }\n}\n\naxios.defaults.withCredentials=true;\n\nconst Ajax = axios.create({\n    baseURL: ajaxUrl,\n    timeout: 30000,\n    transformRequest: [function transformRequest(data, headers) {\n        /* 把类似content-type这种改成Content-Type */\n        let keys = Object.keys(headers);\n        let normalizedName = 'Content-Type';\n        keys.forEach(name => {\n            if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n                headers[normalizedName] = headers[name];\n                delete headers[name];\n            }\n        });\n        if (utils.isFormData(data) ||\n            utils.isArrayBuffer(data) ||\n            utils.isStream(data) ||\n            utils.isFile(data) ||\n            utils.isBlob(data)\n        ) {\n            return data;\n        }\n        if (utils.isURLSearchParams(data)) {\n            setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n            return data.toString();\n        }\n        /* 这里是重点，其他的其实可以照着axios的源码抄 */\n        /* 这里就是用来解决POST提交json数据的时候是直接把整个json放在request payload中提交过去的情况\n         * 这里简单处理下，把 {name: 'admin', pwd: 123}这种转换成name=admin&pwd=123就可以通过\n         * x-www-form-urlencoded这种方式提交\n         * */\n        if (utils.isObject(data)) {\n            setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n            let keys2 = Object.keys(data);\n            /* 这里就是把json变成url形式，并进行encode */\n            return encodeURI(keys2.map(name => `${name}=${data[name]}`).join('&'));\n        }\n        return data;\n    }]\n});\n\n\n//ajax请求前拦截器\nAjax.interceptors.request.use(function (config) {\n    if (config.method === 'post' && utils.isUndefined(config.headers['Content-Type'])) {\n        config.headers['Content-Type'] = 'application/json;charset=utf-8';\n    }\n    return config;\n}, function (error) {\n    return Promise.reject(error);\n});\n//ajax响应后拦截器\nAjax.interceptors.response.use(function (response) {\n    // if (response.data.errCode === 'A0002'){ }\n    return response.data;\n}, function (error) {\n    return Promise.reject(error);\n});\n\nexport default Ajax;"]}]}