{"remainingRequest":"/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9/node_modules/babel-loader/lib/index.js!/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9/node_modules/eslint-loader/index.js??ref--13-0!/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9/src/utils/ie-placeholder.js","dependencies":[{"path":"/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9/src/utils/ie-placeholder.js","mtime":1670495918518},{"path":"/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9/node_modules/cache-loader/dist/cjs.js","mtime":1670485002502},{"path":"/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nexport default function iePlaceholders() {\n  var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (!content) {\n    content = global;\n  }\n\n  (function (content) {\n    'use strict'; //\n    // Test for support. We do this as early as possible to optimise for browsers\n    // that have native support for the attribute.\n    //\n\n    var test = document.createElement('input');\n    var nativeSupport = test.placeholder !== void 0;\n    content.Placeholders = {\n      nativeSupport: nativeSupport,\n      disable: nativeSupport ? noop : disablePlaceholders,\n      enable: nativeSupport ? noop : enablePlaceholders\n    };\n\n    if (nativeSupport) {\n      return;\n    } //\n    // If we reach this point then the browser does not have native support for\n    // the attribute.\n    //\n    // The list of input element types that support the placeholder attribute.\n\n\n    var validTypes = ['text', 'search', 'url', 'tel', 'email', 'password', 'number', 'textarea']; // The list of keycodes that are not allowed when the polyfill is configured\n    // to hide-on-input.\n\n    var badKeys = [// The following keys all cause the caret to jump to the end of the input\n    // value.\n    27, // Escape\n    33, // Page up\n    34, // Page down\n    35, // End\n    36, // Home\n    // Arrow keys allow you to move the caret manually, which should be\n    // prevented when the placeholder is visible.\n    37, // Left\n    38, // Up\n    39, // Right\n    40, // Down\n    // The following keys allow you to modify the placeholder text by removing\n    // characters, which should be prevented when the placeholder is visible.\n    8, // Backspace\n    46 // Delete\n    ]; // Styling variables.\n\n    var placeholderStyleColor = '#ccc';\n    var textStyleColor = '#606266';\n    var placeholderClassName = 'placeholdersjs';\n    var classNameRegExp = new RegExp('(?:^|\\\\s)' + placeholderClassName + '(?!\\\\S)'); // The various data-* attributes used by the polyfill.\n\n    var ATTR_CURRENT_VAL = 'data-placeholder-value';\n    var ATTR_ACTIVE = 'data-placeholder-active';\n    var ATTR_INPUT_TYPE = 'data-placeholder-type';\n    var ATTR_FORM_HANDLED = 'data-placeholder-submit';\n    var ATTR_EVENTS_BOUND = 'data-placeholder-bound';\n    var ATTR_OPTION_FOCUS = 'data-placeholder-focus';\n    var ATTR_OPTION_LIVE = 'data-placeholder-live';\n    var ATTR_MAXLENGTH = 'data-placeholder-maxlength'; // Various other variables used throughout the rest of the script.\n\n    var UPDATE_INTERVAL = 100;\n    var head = document.getElementsByTagName('head')[0];\n    var root = document.documentElement;\n    var Placeholders = content.Placeholders;\n    var keydownVal; // Get references to all the input and textarea elements currently in the DOM\n    // (live NodeList objects to we only need to do this once).\n\n    var inputs = document.getElementsByTagName('input');\n    var textareas = document.getElementsByTagName('textarea'); // Get any settings declared as data-* attributes on the root element.\n    // Currently the only options are whether to hide the placeholder on focus\n    // or input and whether to auto-update.\n\n    var hideOnInput = root.getAttribute(ATTR_OPTION_FOCUS) === 'false';\n    var liveUpdates = root.getAttribute(ATTR_OPTION_LIVE) !== 'false'; // Create style element for placeholder styles (instead of directly setting\n    // style properties on elements - allows for better flexibility alongside\n    // user-defined styles).\n\n    var styleElem = document.createElement('style');\n    styleElem.type = 'text/css'; // Create style rules as text node.\n\n    var styleRules = document.createTextNode('.' + placeholderClassName + ' {' + 'color:' + placeholderStyleColor + ' ;' + '}'); // Append style rules to newly created stylesheet.\n\n    if (styleElem.styleSheet) {\n      styleElem.styleSheet.cssText = styleRules.nodeValue;\n    } else {\n      styleElem.appendChild(styleRules);\n    } // Prepend new style element to the head (before any existing stylesheets,\n    // so user-defined rules take precedence).\n\n\n    head.insertBefore(styleElem, head.firstChild); // Set up the placeholders.\n\n    var placeholder;\n    var elem;\n\n    for (var i = 0, len = inputs.length + textareas.length; i < len; i++) {\n      // Find the next element. If we've already done all the inputs we move on\n      // to the textareas.\n      elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length]; // Get the value of the placeholder attribute, if any. IE10 emulating IE7\n      // fails with getAttribute, hence the use of the attributes node.\n\n      placeholder = elem.attributes.placeholder; // If the element has a placeholder attribute we need to modify it.\n\n      if (placeholder) {\n        // IE returns an empty object instead of undefined if the attribute is\n        // not present.\n        placeholder = placeholder.nodeValue; // Only apply the polyfill if this element is of a type that supports\n        // placeholders and has a placeholder attribute with a non-empty value.\n\n        if (placeholder && inArray(validTypes, elem.type)) {\n          newElement(elem);\n        }\n      }\n    } // If enabled, the polyfill will repeatedly check for changed/added elements\n    // and apply to those as well.\n\n\n    var timer = setInterval(function () {\n      for (var i = 0, len = inputs.length + textareas.length; i < len; i++) {\n        elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length]; // Only apply the polyfill if this element is of a type that supports\n        // placeholders, and has a placeholder attribute with a non-empty value.\n\n        placeholder = elem.attributes.placeholder;\n\n        if (placeholder) {\n          placeholder = placeholder.nodeValue;\n\n          if (placeholder && inArray(validTypes, elem.type)) {\n            // If the element hasn't had event handlers bound to it then add\n            // them.\n            if (!elem.getAttribute(ATTR_EVENTS_BOUND)) {\n              newElement(elem);\n            } // If the placeholder value has changed or not been initialised yet\n            // we need to update the display.\n\n\n            if (placeholder !== elem.getAttribute(ATTR_CURRENT_VAL) || elem.type === 'password' && !elem.getAttribute(ATTR_INPUT_TYPE)) {\n              // Attempt to change the type of password inputs (fails in IE < 9).\n              if (elem.type === 'password' && !elem.getAttribute(ATTR_INPUT_TYPE) && changeType(elem, 'text')) {\n                elem.setAttribute(ATTR_INPUT_TYPE, 'password');\n              } // If the placeholder value has changed and the placeholder is\n              // currently on display we need to change it.\n\n\n              if (elem.value === elem.getAttribute(ATTR_CURRENT_VAL)) {\n                elem.value = placeholder;\n              } // Keep a reference to the current placeholder value in case it\n              // changes via another script.\n\n\n              elem.setAttribute(ATTR_CURRENT_VAL, placeholder);\n            }\n          }\n        } else if (elem.getAttribute(ATTR_ACTIVE)) {\n          hidePlaceholder(elem);\n          elem.removeAttribute(ATTR_CURRENT_VAL);\n        }\n      } // If live updates are not enabled cancel the timer.\n\n\n      if (!liveUpdates) {\n        clearInterval(timer);\n      }\n    }, UPDATE_INTERVAL); // Disabling placeholders before unloading the page prevents flash of\n    // unstyled placeholders on load if the page was refreshed.\n\n    addEventListener(content, 'beforeunload', function () {\n      Placeholders.disable();\n    }); //\n    // Utility functions\n    //\n    // No-op (used in place of public methods when native support is detected).\n\n    function noop() {} // Avoid IE9 activeElement of death when an iframe is used.\n    //\n    // More info:\n    //  - http://bugs.jquery.com/ticket/13393\n    //  - https://github.com/jquery/jquery/commit/85fc5878b3c6af73f42d61eedf73013e7faae408\n\n\n    function safeActiveElement() {\n      try {\n        return document.activeElement;\n      } catch (err) {}\n    } // Check whether an item is in an array. We don't use Array.prototype.indexOf\n    // so we don't clobber any existing polyfills. This is a really simple\n    // alternative.\n\n\n    function inArray(arr, item) {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        if (arr[i] === item) {\n          return true;\n        }\n      }\n\n      return false;\n    } // Cross-browser DOM event binding\n\n\n    function addEventListener(elem, event, fn) {\n      if (elem.addEventListener) {\n        return elem.addEventListener(event, fn, false);\n      }\n\n      if (elem.attachEvent) {\n        return elem.attachEvent('on' + event, fn);\n      }\n    } // Move the caret to the index position specified. Assumes that the element\n    // has focus.\n\n\n    function moveCaret(elem, index) {\n      var range;\n\n      if (elem.createTextRange) {\n        range = elem.createTextRange();\n        range.move('character', index);\n        range.select();\n      } else if (elem.selectionStart) {\n        elem.focus();\n        elem.setSelectionRange(index, index);\n      }\n    } // Attempt to change the type property of an input element.\n\n\n    function changeType(elem, type) {\n      try {\n        elem.type = type;\n        return true;\n      } catch (e) {\n        // You can't change input type in IE8 and below.\n        return false;\n      }\n    }\n\n    function handleElem(node, callback) {\n      // Check if the passed in node is an input/textarea (in which case it can't\n      // have any affected descendants).\n      if (node && node.getAttribute(ATTR_CURRENT_VAL)) {\n        callback(node);\n      } else {\n        // If an element was passed in, get all affected descendants. Otherwise,\n        // get all affected elements in document.\n        var handleInputs = node ? node.getElementsByTagName('input') : inputs;\n        var handleTextareas = node ? node.getElementsByTagName('textarea') : textareas;\n        var handleInputsLength = handleInputs ? handleInputs.length : 0;\n        var handleTextareasLength = handleTextareas ? handleTextareas.length : 0; // Run the callback for each element.\n\n        var len = handleInputsLength + handleTextareasLength;\n        var elem;\n\n        for (var i = 0; i < len; i++) {\n          elem = i < handleInputsLength ? handleInputs[i] : handleTextareas[i - handleInputsLength];\n          callback(elem);\n        }\n      }\n    } // Return all affected elements to their normal state (remove placeholder\n    // value if present).\n\n\n    function disablePlaceholders(node) {\n      handleElem(node, hidePlaceholder);\n    } // Show the placeholder value on all appropriate elements.\n\n\n    function enablePlaceholders(node) {\n      handleElem(node, showPlaceholder);\n    } // Hide the placeholder value on a single element. Returns true if the\n    // placeholder was hidden and false if it was not (because it wasn't visible\n    // in the first place).\n\n\n    function hidePlaceholder(elem, keydownValue) {\n      if (!elem.value) {\n        elem.style.color = placeholderStyleColor; // console.log('has no content!')\n\n        return;\n      }\n\n      elem.style.color = textStyleColor;\n      var valueChanged = !!keydownValue && elem.value !== keydownValue;\n      var isPlaceholderValue = elem.value === elem.getAttribute(ATTR_CURRENT_VAL);\n\n      if ((valueChanged || isPlaceholderValue) && elem.getAttribute(ATTR_ACTIVE) === 'true') {\n        elem.removeAttribute(ATTR_ACTIVE);\n        elem.value = elem.value.replace(elem.getAttribute(ATTR_CURRENT_VAL), '');\n        elem.className = elem.className.replace(classNameRegExp, ''); // Restore the maxlength value. Old FF returns -1 if attribute not set.\n        // See GH-56.\n\n        var maxLength = elem.getAttribute(ATTR_MAXLENGTH);\n\n        if (parseInt(maxLength, 10) >= 0) {\n          elem.setAttribute('maxLength', maxLength);\n          elem.removeAttribute(ATTR_MAXLENGTH);\n        } // If the polyfill has changed the type of the element we need to change\n        // it back.\n\n\n        var type = elem.getAttribute(ATTR_INPUT_TYPE);\n\n        if (type) {\n          elem.type = type;\n        }\n\n        return true;\n      }\n\n      return false;\n    } // Show the placeholder value on a single element. Returns true if the\n    // placeholder was shown and false if it was not (because it was already\n    // visible).\n\n\n    function showPlaceholder(elem) {\n      if (elem.value) {\n        elem.style.color = textStyleColor; // console.log('has content!', elem.value)\n\n        return;\n      }\n\n      var val = elem.getAttribute(ATTR_CURRENT_VAL);\n\n      if (elem.value === '' && val) {\n        elem.style.color = placeholderStyleColor;\n        elem.setAttribute(ATTR_ACTIVE, 'true');\n        elem.value = val;\n        elem.className += ' ' + placeholderClassName; // Store and remove the maxlength value.\n\n        var maxLength = elem.getAttribute(ATTR_MAXLENGTH);\n\n        if (!maxLength) {\n          elem.setAttribute(ATTR_MAXLENGTH, elem.maxLength);\n          elem.removeAttribute('maxLength');\n        } // If the type of element needs to change, change it (e.g. password\n        // inputs).\n\n\n        var type = elem.getAttribute(ATTR_INPUT_TYPE);\n\n        if (type) {\n          elem.type = 'text';\n        } else if (elem.type === 'password' && changeType(elem, 'text')) {\n          elem.setAttribute(ATTR_INPUT_TYPE, 'password');\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    function makeInputChangeHandler(elem) {\n      if (elem.value) {\n        hidePlaceholder(elem, keydownVal);\n      } else {\n        showPlaceholder(elem);\n      }\n    } // Returns a function that is used as a focus event handler.\n\n\n    function makeFocusHandler(elem) {\n      return function () {\n        // Only hide the placeholder value if the (default) hide-on-focus\n        // behaviour is enabled.\n        if (hideOnInput && elem.value === elem.getAttribute(ATTR_CURRENT_VAL) && elem.getAttribute(ATTR_ACTIVE) === 'true') {\n          // Move the caret to the start of the input (this mimics the behaviour\n          // of all browsers that do not hide the placeholder on focus).\n          moveCaret(elem, 0);\n        } else {\n          // Remove the placeholder.\n          hidePlaceholder(elem);\n        }\n      };\n    } // Returns a function that is used as a blur event handler.\n\n\n    function makeBlurHandler(elem) {\n      return function () {\n        showPlaceholder(elem);\n\n        if (!elem.value) {\n          showPlaceholder(elem);\n        } else {\n          hidePlaceholder(elem, keydownVal);\n        }\n      };\n    } // Returns a function that is used as a submit event handler on form elements\n    // that have children affected by this polyfill.\n\n\n    function makeSubmitHandler(form) {\n      return function () {\n        // Turn off placeholders on all appropriate descendant elements.\n        disablePlaceholders(form);\n      };\n    } // Functions that are used as a event handlers when the hide-on-input\n    // behaviour has been activated - very basic implementation of the 'input'\n    // event.\n\n\n    function makeKeydownHandler(elem) {\n      return function (e) {\n        keydownVal = elem.value; // Prevent the use of the arrow keys (try to keep the cursor before the\n        // placeholder).\n\n        if (elem.getAttribute(ATTR_ACTIVE) === 'true' && keydownVal === elem.getAttribute(ATTR_CURRENT_VAL) && inArray(badKeys, e.keyCode)) {\n          if (e.preventDefault) {\n            e.preventDefault();\n          }\n\n          return false;\n        }\n      };\n    }\n\n    function makeKeyupHandler(elem) {\n      return function () {\n        hidePlaceholder(elem, keydownVal); // If the element is now empty we need to show the placeholder\n\n        if (elem.value === '') {\n          elem.blur();\n          moveCaret(elem, 0);\n        }\n      };\n    }\n\n    function makeClickHandler(elem) {\n      return function () {\n        if (elem === safeActiveElement() && elem.value === elem.getAttribute(ATTR_CURRENT_VAL) && elem.getAttribute(ATTR_ACTIVE) === 'true') {\n          moveCaret(elem, 0);\n        }\n      };\n    } // Bind event handlers to an element that we need to affect with the\n    // polyfill.\n\n\n    function newElement(elem) {\n      // If the element is part of a form, make sure the placeholder string is\n      // not submitted as a value.\n      // elem.onpropertychange = makeInputChangeHandler(elem)\n      var form = elem.form;\n\n      if (form && typeof form === 'string') {\n        // Get the real form.\n        form = document.getElementById(form); // Set a flag on the form so we know it's been handled (forms can contain\n        // multiple inputs).\n\n        if (!form.getAttribute(ATTR_FORM_HANDLED)) {\n          addEventListener(form, 'submit', makeSubmitHandler(form));\n          form.setAttribute(ATTR_FORM_HANDLED, 'true');\n        }\n      } // Bind event handlers to the element so we can hide/show the placeholder\n      // as appropriate.\n\n\n      addEventListener(elem, 'focus', makeFocusHandler(elem));\n      addEventListener(elem, 'blur', makeBlurHandler(elem)); // If the placeholder should hide on input rather than on focus we need\n      // additional event handlers\n\n      if (hideOnInput) {\n        addEventListener(elem, 'keydown', makeKeydownHandler(elem));\n        addEventListener(elem, 'keyup', makeKeyupHandler(elem));\n        addEventListener(elem, 'click', makeClickHandler(elem));\n      } // Remember that we've bound event handlers to this element.\n\n\n      elem.setAttribute(ATTR_EVENTS_BOUND, 'true');\n      elem.setAttribute(ATTR_CURRENT_VAL, placeholder); // If the element doesn't have a value and is not focussed, set it to the\n      // placeholder string.\n\n      if (hideOnInput || elem !== safeActiveElement()) {\n        showPlaceholder(elem);\n      }\n    }\n  })(this);\n}",{"version":3,"sources":["src/utils/ie-placeholder.js"],"names":["iePlaceholders","content","global","test","document","createElement","nativeSupport","placeholder","Placeholders","disable","noop","disablePlaceholders","enable","enablePlaceholders","validTypes","badKeys","placeholderStyleColor","textStyleColor","placeholderClassName","classNameRegExp","RegExp","ATTR_CURRENT_VAL","ATTR_ACTIVE","ATTR_INPUT_TYPE","ATTR_FORM_HANDLED","ATTR_EVENTS_BOUND","ATTR_OPTION_FOCUS","ATTR_OPTION_LIVE","ATTR_MAXLENGTH","UPDATE_INTERVAL","head","getElementsByTagName","root","documentElement","keydownVal","inputs","textareas","hideOnInput","getAttribute","liveUpdates","styleElem","type","styleRules","createTextNode","styleSheet","cssText","nodeValue","appendChild","insertBefore","firstChild","elem","i","len","length","attributes","inArray","newElement","timer","setInterval","changeType","setAttribute","value","hidePlaceholder","removeAttribute","clearInterval","addEventListener","safeActiveElement","activeElement","err","arr","item","event","fn","attachEvent","moveCaret","index","range","createTextRange","move","select","selectionStart","focus","setSelectionRange","e","handleElem","node","callback","handleInputs","handleTextareas","handleInputsLength","handleTextareasLength","showPlaceholder","keydownValue","style","color","valueChanged","isPlaceholderValue","replace","className","maxLength","parseInt","val","makeInputChangeHandler","makeFocusHandler","makeBlurHandler","makeSubmitHandler","form","makeKeydownHandler","keyCode","preventDefault","makeKeyupHandler","blur","makeClickHandler","getElementById"],"mappings":"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","sourceRoot":"/Users/yeyanghui/Documents/github 源码（自己）/vue2-ie9","sourcesContent":["export default function iePlaceholders(content = null) {\n    if (!content) {\n        content = global\n    }\n    (function (content) {\n\n        'use strict';\n\n        //\n        // Test for support. We do this as early as possible to optimise for browsers\n        // that have native support for the attribute.\n        //\n\n        var test = document.createElement('input');\n        var nativeSupport = test.placeholder !== void 0;\n\n        content.Placeholders = {\n            nativeSupport: nativeSupport,\n            disable: nativeSupport ? noop : disablePlaceholders,\n            enable: nativeSupport ? noop : enablePlaceholders\n        };\n\n        if (nativeSupport) {\n            return;\n        }\n\n        //\n        // If we reach this point then the browser does not have native support for\n        // the attribute.\n        //\n\n        // The list of input element types that support the placeholder attribute.\n        var validTypes = [\n            'text',\n            'search',\n            'url',\n            'tel',\n            'email',\n            'password',\n            'number',\n            'textarea'\n        ];\n\n        // The list of keycodes that are not allowed when the polyfill is configured\n        // to hide-on-input.\n        var badKeys = [\n\n            // The following keys all cause the caret to jump to the end of the input\n            // value.\n\n            27, // Escape\n            33, // Page up\n            34, // Page down\n            35, // End\n            36, // Home\n\n            // Arrow keys allow you to move the caret manually, which should be\n            // prevented when the placeholder is visible.\n\n            37, // Left\n            38, // Up\n            39, // Right\n            40, // Down\n\n            // The following keys allow you to modify the placeholder text by removing\n            // characters, which should be prevented when the placeholder is visible.\n\n            8, // Backspace\n            46 // Delete\n        ];\n\n        // Styling variables.\n        var placeholderStyleColor = '#ccc';\n        var textStyleColor = '#606266';\n        var placeholderClassName = 'placeholdersjs';\n        var classNameRegExp = new RegExp('(?:^|\\\\s)' + placeholderClassName + '(?!\\\\S)');\n\n        // The various data-* attributes used by the polyfill.\n        var ATTR_CURRENT_VAL = 'data-placeholder-value';\n        var ATTR_ACTIVE = 'data-placeholder-active';\n        var ATTR_INPUT_TYPE = 'data-placeholder-type';\n        var ATTR_FORM_HANDLED = 'data-placeholder-submit';\n        var ATTR_EVENTS_BOUND = 'data-placeholder-bound';\n        var ATTR_OPTION_FOCUS = 'data-placeholder-focus';\n        var ATTR_OPTION_LIVE = 'data-placeholder-live';\n        var ATTR_MAXLENGTH = 'data-placeholder-maxlength';\n\n        // Various other variables used throughout the rest of the script.\n        var UPDATE_INTERVAL = 100;\n        var head = document.getElementsByTagName('head')[0];\n        var root = document.documentElement;\n        var Placeholders = content.Placeholders;\n        var keydownVal;\n\n        // Get references to all the input and textarea elements currently in the DOM\n        // (live NodeList objects to we only need to do this once).\n        var inputs = document.getElementsByTagName('input');\n        var textareas = document.getElementsByTagName('textarea');\n\n        // Get any settings declared as data-* attributes on the root element.\n        // Currently the only options are whether to hide the placeholder on focus\n        // or input and whether to auto-update.\n        var hideOnInput = root.getAttribute(ATTR_OPTION_FOCUS) === 'false';\n        var liveUpdates = root.getAttribute(ATTR_OPTION_LIVE) !== 'false';\n\n        // Create style element for placeholder styles (instead of directly setting\n        // style properties on elements - allows for better flexibility alongside\n        // user-defined styles).\n        var styleElem = document.createElement('style');\n        styleElem.type = 'text/css';\n\n        // Create style rules as text node.\n        var styleRules = document.createTextNode(\n            '.' + placeholderClassName + ' {' +\n            'color:' + placeholderStyleColor + ' ;' +\n            '}'\n        );\n\n        // Append style rules to newly created stylesheet.\n        if (styleElem.styleSheet) {\n            styleElem.styleSheet.cssText = styleRules.nodeValue;\n        } else {\n            styleElem.appendChild(styleRules);\n        }\n\n        // Prepend new style element to the head (before any existing stylesheets,\n        // so user-defined rules take precedence).\n        head.insertBefore(styleElem, head.firstChild);\n\n        // Set up the placeholders.\n        var placeholder;\n        var elem;\n\n        for (var i = 0, len = inputs.length + textareas.length; i < len; i++) {\n\n            // Find the next element. If we've already done all the inputs we move on\n            // to the textareas.\n            elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length];\n\n            // Get the value of the placeholder attribute, if any. IE10 emulating IE7\n            // fails with getAttribute, hence the use of the attributes node.\n            placeholder = elem.attributes.placeholder;\n\n            // If the element has a placeholder attribute we need to modify it.\n            if (placeholder) {\n\n                // IE returns an empty object instead of undefined if the attribute is\n                // not present.\n                placeholder = placeholder.nodeValue;\n\n                // Only apply the polyfill if this element is of a type that supports\n                // placeholders and has a placeholder attribute with a non-empty value.\n                if (placeholder && inArray(validTypes, elem.type)) {\n                    newElement(elem);\n                }\n            }\n        }\n\n        // If enabled, the polyfill will repeatedly check for changed/added elements\n        // and apply to those as well.\n        var timer = setInterval(function () {\n            for (var i = 0, len = inputs.length + textareas.length; i < len; i++) {\n                elem = i < inputs.length ? inputs[i] : textareas[i - inputs.length];\n\n                // Only apply the polyfill if this element is of a type that supports\n                // placeholders, and has a placeholder attribute with a non-empty value.\n                placeholder = elem.attributes.placeholder;\n\n                if (placeholder) {\n\n                    placeholder = placeholder.nodeValue;\n\n                    if (placeholder && inArray(validTypes, elem.type)) {\n\n                        // If the element hasn't had event handlers bound to it then add\n                        // them.\n                        if (!elem.getAttribute(ATTR_EVENTS_BOUND)) {\n                            newElement(elem);\n                        }\n\n                        // If the placeholder value has changed or not been initialised yet\n                        // we need to update the display.\n                        if (\n                            placeholder !== elem.getAttribute(ATTR_CURRENT_VAL) ||\n                            (elem.type === 'password' && !elem.getAttribute(ATTR_INPUT_TYPE))\n                        ) {\n\n                            // Attempt to change the type of password inputs (fails in IE < 9).\n                            if (\n                                elem.type === 'password' &&\n                                !elem.getAttribute(ATTR_INPUT_TYPE) &&\n                                changeType(elem, 'text')\n                            ) {\n                                elem.setAttribute(ATTR_INPUT_TYPE, 'password');\n                            }\n\n                            // If the placeholder value has changed and the placeholder is\n                            // currently on display we need to change it.\n                            if (elem.value === elem.getAttribute(ATTR_CURRENT_VAL)) {\n                                elem.value = placeholder;\n                            }\n\n                            // Keep a reference to the current placeholder value in case it\n                            // changes via another script.\n                            elem.setAttribute(ATTR_CURRENT_VAL, placeholder);\n                        }\n                    }\n                } else if (elem.getAttribute(ATTR_ACTIVE)) {\n                    hidePlaceholder(elem);\n                    elem.removeAttribute(ATTR_CURRENT_VAL);\n                }\n            }\n\n            // If live updates are not enabled cancel the timer.\n            if (!liveUpdates) {\n                clearInterval(timer);\n            }\n        }, UPDATE_INTERVAL);\n\n        // Disabling placeholders before unloading the page prevents flash of\n        // unstyled placeholders on load if the page was refreshed.\n        addEventListener(content, 'beforeunload', function () {\n            Placeholders.disable();\n        });\n\n        //\n        // Utility functions\n        //\n\n        // No-op (used in place of public methods when native support is detected).\n        function noop() { }\n\n        // Avoid IE9 activeElement of death when an iframe is used.\n        //\n        // More info:\n        //  - http://bugs.jquery.com/ticket/13393\n        //  - https://github.com/jquery/jquery/commit/85fc5878b3c6af73f42d61eedf73013e7faae408\n        function safeActiveElement() {\n            try {\n                return document.activeElement;\n            } catch (err) { }\n        }\n\n        // Check whether an item is in an array. We don't use Array.prototype.indexOf\n        // so we don't clobber any existing polyfills. This is a really simple\n        // alternative.\n        function inArray(arr, item) {\n            for (var i = 0, len = arr.length; i < len; i++) {\n                if (arr[i] === item) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        // Cross-browser DOM event binding\n        function addEventListener(elem, event, fn) {\n            if (elem.addEventListener) {\n                return elem.addEventListener(event, fn, false);\n            }\n            if (elem.attachEvent) {\n                return elem.attachEvent('on' + event, fn);\n            }\n        }\n\n        // Move the caret to the index position specified. Assumes that the element\n        // has focus.\n        function moveCaret(elem, index) {\n            var range;\n            if (elem.createTextRange) {\n                range = elem.createTextRange();\n                range.move('character', index);\n                range.select();\n            } else if (elem.selectionStart) {\n                elem.focus();\n                elem.setSelectionRange(index, index);\n            }\n        }\n\n        // Attempt to change the type property of an input element.\n        function changeType(elem, type) {\n            try {\n                elem.type = type;\n                return true;\n            } catch (e) {\n                // You can't change input type in IE8 and below.\n                return false;\n            }\n        }\n\n        function handleElem(node, callback) {\n\n            // Check if the passed in node is an input/textarea (in which case it can't\n            // have any affected descendants).\n            if (node && node.getAttribute(ATTR_CURRENT_VAL)) {\n                callback(node);\n            } else {\n\n                // If an element was passed in, get all affected descendants. Otherwise,\n                // get all affected elements in document.\n                var handleInputs = node ? node.getElementsByTagName('input') : inputs;\n                var handleTextareas = node ? node.getElementsByTagName('textarea') : textareas;\n\n                var handleInputsLength = handleInputs ? handleInputs.length : 0;\n                var handleTextareasLength = handleTextareas ? handleTextareas.length : 0;\n\n                // Run the callback for each element.\n                var len = handleInputsLength + handleTextareasLength;\n                var elem;\n                for (var i = 0; i < len; i++) {\n\n                    elem = i < handleInputsLength ?\n                        handleInputs[i] :\n                        handleTextareas[i - handleInputsLength];\n\n                    callback(elem);\n                }\n            }\n        }\n\n        // Return all affected elements to their normal state (remove placeholder\n        // value if present).\n        function disablePlaceholders(node) {\n            handleElem(node, hidePlaceholder);\n        }\n\n        // Show the placeholder value on all appropriate elements.\n        function enablePlaceholders(node) {\n            handleElem(node, showPlaceholder);\n        }\n\n        // Hide the placeholder value on a single element. Returns true if the\n        // placeholder was hidden and false if it was not (because it wasn't visible\n        // in the first place).\n        function hidePlaceholder(elem, keydownValue) {\n            if (!elem.value) {\n                elem.style.color = placeholderStyleColor;\n                // console.log('has no content!')\n                return\n            }\n            elem.style.color = textStyleColor;\n\n            var valueChanged = !!keydownValue && elem.value !== keydownValue;\n            var isPlaceholderValue = elem.value === elem.getAttribute(ATTR_CURRENT_VAL);\n\n            if (\n                (valueChanged || isPlaceholderValue) &&\n                elem.getAttribute(ATTR_ACTIVE) === 'true'\n            ) {\n\n                elem.removeAttribute(ATTR_ACTIVE);\n                elem.value = elem.value.replace(elem.getAttribute(ATTR_CURRENT_VAL), '');\n                elem.className = elem.className.replace(classNameRegExp, '');\n\n                // Restore the maxlength value. Old FF returns -1 if attribute not set.\n                // See GH-56.\n                var maxLength = elem.getAttribute(ATTR_MAXLENGTH);\n                if (parseInt(maxLength, 10) >= 0) {\n                    elem.setAttribute('maxLength', maxLength);\n                    elem.removeAttribute(ATTR_MAXLENGTH);\n                }\n\n                // If the polyfill has changed the type of the element we need to change\n                // it back.\n                var type = elem.getAttribute(ATTR_INPUT_TYPE);\n                if (type) {\n                    elem.type = type;\n                }\n\n                return true;\n            }\n\n            return false;\n        }\n\n        // Show the placeholder value on a single element. Returns true if the\n        // placeholder was shown and false if it was not (because it was already\n        // visible).\n        function showPlaceholder(elem) {\n            if (elem.value) {\n                elem.style.color = textStyleColor;\n                // console.log('has content!', elem.value)\n                return\n            }\n\n            var val = elem.getAttribute(ATTR_CURRENT_VAL);\n\n            if (elem.value === '' && val) {\n                elem.style.color = placeholderStyleColor;\n\n                elem.setAttribute(ATTR_ACTIVE, 'true');\n                elem.value = val;\n                elem.className += ' ' + placeholderClassName;\n\n                // Store and remove the maxlength value.\n                var maxLength = elem.getAttribute(ATTR_MAXLENGTH);\n                if (!maxLength) {\n                    elem.setAttribute(ATTR_MAXLENGTH, elem.maxLength);\n                    elem.removeAttribute('maxLength');\n                }\n\n                // If the type of element needs to change, change it (e.g. password\n                // inputs).\n                var type = elem.getAttribute(ATTR_INPUT_TYPE);\n                if (type) {\n                    elem.type = 'text';\n                } else if (elem.type === 'password' && changeType(elem, 'text')) {\n                    elem.setAttribute(ATTR_INPUT_TYPE, 'password');\n                }\n\n                return true;\n            }\n\n            return false;\n        }\n\n        function makeInputChangeHandler(elem) {\n            if (elem.value) {\n                hidePlaceholder(elem, keydownVal);\n            } else {\n                showPlaceholder(elem);\n            }\n        }\n\n        // Returns a function that is used as a focus event handler.\n        function makeFocusHandler(elem) {\n            return function () {\n                // Only hide the placeholder value if the (default) hide-on-focus\n                // behaviour is enabled.\n                if (\n                    hideOnInput &&\n                    elem.value === elem.getAttribute(ATTR_CURRENT_VAL) &&\n                    elem.getAttribute(ATTR_ACTIVE) === 'true'\n                ) {\n\n                    // Move the caret to the start of the input (this mimics the behaviour\n                    // of all browsers that do not hide the placeholder on focus).\n                    moveCaret(elem, 0);\n                } else {\n                    // Remove the placeholder.\n                    hidePlaceholder(elem);\n                }\n            };\n        }\n\n        // Returns a function that is used as a blur event handler.\n        function makeBlurHandler(elem) {\n            return function () {\n                showPlaceholder(elem);\n                if (!elem.value) {\n                    showPlaceholder(elem);\n                } else {\n                    hidePlaceholder(elem, keydownVal);\n                }\n            };\n        }\n\n        // Returns a function that is used as a submit event handler on form elements\n        // that have children affected by this polyfill.\n        function makeSubmitHandler(form) {\n            return function () {\n\n                // Turn off placeholders on all appropriate descendant elements.\n                disablePlaceholders(form);\n            };\n        }\n\n        // Functions that are used as a event handlers when the hide-on-input\n        // behaviour has been activated - very basic implementation of the 'input'\n        // event.\n        function makeKeydownHandler(elem) {\n            return function (e) {\n                keydownVal = elem.value;\n\n                // Prevent the use of the arrow keys (try to keep the cursor before the\n                // placeholder).\n                if (\n                    elem.getAttribute(ATTR_ACTIVE) === 'true' &&\n                    keydownVal === elem.getAttribute(ATTR_CURRENT_VAL) &&\n                    inArray(badKeys, e.keyCode)\n                ) {\n                    if (e.preventDefault) {\n                        e.preventDefault();\n                    }\n                    return false;\n                }\n            };\n        }\n\n        function makeKeyupHandler(elem) {\n            return function () {\n                hidePlaceholder(elem, keydownVal);\n\n                // If the element is now empty we need to show the placeholder\n                if (elem.value === '') {\n                    elem.blur();\n                    moveCaret(elem, 0);\n                }\n            };\n        }\n\n        function makeClickHandler(elem) {\n            return function () {\n                if (\n                    elem === safeActiveElement() &&\n                    elem.value === elem.getAttribute(ATTR_CURRENT_VAL) &&\n                    elem.getAttribute(ATTR_ACTIVE) === 'true'\n                ) {\n                    moveCaret(elem, 0);\n                }\n            };\n        }\n\n        // Bind event handlers to an element that we need to affect with the\n        // polyfill.\n        function newElement(elem) {\n            // If the element is part of a form, make sure the placeholder string is\n            // not submitted as a value.\n            // elem.onpropertychange = makeInputChangeHandler(elem)\n\n            var form = elem.form;\n            if (form && typeof form === 'string') {\n\n                // Get the real form.\n                form = document.getElementById(form);\n\n                // Set a flag on the form so we know it's been handled (forms can contain\n                // multiple inputs).\n                if (!form.getAttribute(ATTR_FORM_HANDLED)) {\n                    addEventListener(form, 'submit', makeSubmitHandler(form));\n                    form.setAttribute(ATTR_FORM_HANDLED, 'true');\n                }\n            }\n\n            // Bind event handlers to the element so we can hide/show the placeholder\n            // as appropriate.\n            addEventListener(elem, 'focus', makeFocusHandler(elem));\n            addEventListener(elem, 'blur', makeBlurHandler(elem));\n\n            // If the placeholder should hide on input rather than on focus we need\n            // additional event handlers\n            if (hideOnInput) {\n                addEventListener(elem, 'keydown', makeKeydownHandler(elem));\n                addEventListener(elem, 'keyup', makeKeyupHandler(elem));\n                addEventListener(elem, 'click', makeClickHandler(elem));\n            }\n\n            // Remember that we've bound event handlers to this element.\n            elem.setAttribute(ATTR_EVENTS_BOUND, 'true');\n            elem.setAttribute(ATTR_CURRENT_VAL, placeholder);\n\n            // If the element doesn't have a value and is not focussed, set it to the\n            // placeholder string.\n            if (hideOnInput || elem !== safeActiveElement()) {\n                showPlaceholder(elem);\n            }\n        }\n\n    }(this));\n}"]}]}