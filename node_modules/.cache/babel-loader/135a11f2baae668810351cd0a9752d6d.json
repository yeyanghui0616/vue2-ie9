{"remainingRequest":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/thread-loader/dist/cjs.js!/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/babel-loader/lib/index.js!/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/eslint-loader/index.js??ref--13-0!/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/src/lib/utils.js","dependencies":[{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/src/lib/utils.js","mtime":1670489054199},{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/cache-loader/dist/cjs.js","mtime":1670485002502},{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/thread-loader/dist/cjs.js","mtime":1670485003527},{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nimport \"core-js/modules/es6.regexp.replace\";\nimport _typeof from \"/Users/yeyanghui/Documents/github \\u6E90\\u7801\\uFF08\\u4ED6\\u4EBA\\uFF09/vue-ie9/node_modules/@babel/runtime/helpers/builtin/es6/typeof\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nvar bind = require('./helpers/bind');\n/*global toString:true*/\n// utils is a library of generic helper functions non-specific to axios\n\n\nvar toString = Object.prototype.toString;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\n\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\n\n\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\n\n\nfunction isFormData(val) {\n  return typeof FormData !== 'undefined' && val instanceof FormData;\n}\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\n\n\nfunction isArrayBufferView(val) {\n  var result;\n\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && val.buffer instanceof ArrayBuffer;\n  }\n\n  return result;\n}\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\n\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\n\n\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\n\n\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\n\n\nfunction isObject(val) {\n  return val !== null && _typeof(val) === 'object';\n}\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\n\n\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\n\n\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\n\n\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\n\n\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\n\n\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\n\n\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\n\n\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  typeof document.createElement -> undefined\n */\n\n\nfunction isStandardBrowserEnv() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined' && typeof document.createElement === 'function';\n}\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\n\n\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  } // Force an array if not already something iterable\n\n\n  if (_typeof(obj) !== 'object' && !isArray(obj)) {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\n\n\nfunction merge()\n/* obj1, obj2, obj3, ... */\n{\n  var result = {};\n\n  function assignValue(val, key) {\n    if (_typeof(result[key]) === 'object' && _typeof(val) === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n\n  return result;\n}\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\n\n\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nexport default {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};",{"version":3,"sources":["src/lib/utils.js"],"names":["bind","require","toString","Object","prototype","isArray","val","call","isArrayBuffer","isFormData","FormData","isArrayBufferView","result","ArrayBuffer","isView","buffer","isString","isNumber","isUndefined","isObject","isDate","isFile","isBlob","isFunction","isStream","pipe","isURLSearchParams","URLSearchParams","trim","str","replace","isStandardBrowserEnv","window","document","createElement","forEach","obj","fn","i","l","length","key","hasOwnProperty","merge","assignValue","arguments","extend","a","b","thisArg"],"mappings":"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","sourceRoot":"/Users/yeyanghui/Documents/github 源码（他人）/vue-ie9","sourcesContent":["'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  typeof document.createElement -> undefined\n */\nfunction isStandardBrowserEnv() {\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined' &&\n    typeof document.createElement === 'function'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object' && !isArray(obj)) {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nexport default {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n"]}]}